---
title: "Clean code for all lakes"
format: html
editor: visual
---

## 1. Data for response diversity

```{r}
#| eval: false
# rm(list = ls())
#removes all variables from the current environment, not necessary for what I am doing here
library(tidyverse)
library(patchwork)
library(ggtext)
library(mgcv)
library(gratia)
#library(hypervolume)
library(here)
library(readr)

# function includes lakeColors
source(here("color-and-functions.R"))

# load final dataset
df_final_no_electro <- read_rds("/home/sophie/Dokumente/Master Thesis R/Master Thesis Analysis/df_final_ne.rds")

```

## 2. Calculating Response Diversity for all lakes

First trying it with nested data. Otherwise, doing a for loop or a function

```{r}
# df_final_ne does not include the data from electro fishing -> different number of fish species per lake

# change that presence and abundance are in one column with one column for value
nets_df_final <- df_final_no_electro |> 
  pivot_longer(
    cols = c("Abundance", "Presence"), 
    names_to = "Parameter", 
    values_to = "value"
  )

# make list of all lakes
lakes_list <- nets_df_final |> 
  distinct(Lake) |> 
  pull(Lake)

# later included inside the loop
# species_list <- nets_df_final |> 
#   distinct(Species) |> 
#   pull(Species)

# working with an abundance subset of this dataset
# if else statement in loop would be a possibility
abu_nets_df_final <- nets_df_final |> 
  filter(Parameter == "Abundance")


# make temperature gradient for the prediction
temp_gradient <- data.frame(mean_last_7days = seq(from = min(abu_nets_df_final$mean_last_7days, na.rm = TRUE), to = max(abu_nets_df_final$mean_last_7days, na.rm = TRUE), by = 0.02))


# make empty lists for the new data provided by the loop
gam_output <- list()
model_prediction <- list()
derivatives <- list()

#loop for all lakes

for (i in lakes_list){
  presence_lake <- abu_nets_df_final |>
    filter(Lake == i)
  species_list <- presence_lake |>
    distinct(Species) |>
    pull(Species)
  #saveRDS(species_list,paste0("test_species/species_", i,".rds"))
  for (j in species_list){ #looping through all species occuring in this lake
    data <- presence_lake |> 
      filter(Species == j)
    gam_output[[j]] <- gam(data = data, value ~ s(mean_last_7days, k = 3)) #GAM per species in all lakes
    model_prediction[[j]] <- predict.gam(gam_output[[j]], temp_gradient, type = "response", se.fit = TRUE)$fit #saving model predictions in RDS
    saveRDS(model_prediction[[j]], paste0("predictions_abundance/predictions_",i,"_",j,".rds"))
    derivatives[[j]] <- derivatives(gam_output[[j]]) #making derivatives and saving them in a RDS
    saveRDS(derivatives[[j]], paste0("derivatives_abundance/derivatives_",i,"_",j,".rds"))
  }

}

# looping through every lake, filtering it by the current lake and pulling a list of in this lake occuring species
#small lake subset to change the loop

# gam_output <- list()
# model_prediction <- list()
# derivatives <- list()
# 
# df_small <- abu_nets_df_final |> 
#   filter(Lake %in% c("Biel", "Brienz", "Walen"))
# 
# small_lakes <- df_small |> 
#   distinct(Lake) |> 
#   pull(Lake)
# 
# for (i in small_lakes){
#   presence_lake <- df_small |>
#     filter(Lake == i)
#   species_list <- presence_lake |>
#     distinct(Species) |>
#     pull(Species)
#   #saveRDS(species_list,paste0("test_species/species_", i,".rds"))
#   for (j in species_list){ #looping through all species occuring in this lake
#     data <- presence_lake |> 
#       filter(Species == j)
#     gam_output[[j]] <- gam(data = data, value ~ s(mean_last_7days, k = 3)) #GAM per species in all lakes
#     model_prediction[[j]] <- predict.gam(gam_output[[j]], temp_gradient, type = "response", se.fit = TRUE)$fit #saving model predictions in RDS
#     saveRDS(model_prediction[[j]], paste0("pred_test/predictions_",i,"_",j,".rds"))
#     derivatives[[j]] <- derivatives(gam_output[[j]]) #making derivatives and saving them in a RDS
#     saveRDS(derivatives[[j]], paste0("deriv_test/derivatives_",i,"_",j,".rds"))
#   }
# 
# }
# 

# make df with predictions of one lake

path_pred <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/predictions_abundance"

predictions_list <-list.files(path_pred)

predictions_test <- tibble()

for (i in lakes_list){
  predictions_test <- predictions_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  saveRDS(predictions_test, paste0("predictions_lake/predictions_",i,".rds"))
}


lake_biel <- readRDS("predictions_lake/predictions_Biel.rds")
biel_predictions <- list()

for (i in lake_biel){
  biel_predictions[[i]] <- readRDS(paste0(path_pred,"/", i))
}

df_biel <- biel_predictions |> 
  bind_cols() |> 
  rename_all(~stringr::str_replace(.,"^predictions_Biel_","")) |> 
  rename_with(~ sub(".rds$", "", .x), everything())

df_biel <- cbind(df_biel, temp_gradient)

df_biel_pred <- df_biel |> 
  pivot_longer(
    cols = c(1:22),
    names_to = "Species", 
    values_to = "model_prediction")

df_biel_pred <- df_biel_pred |> 
  rename(temp = mean_last_7days)

#make df with derivatives and combine both dfs
# something is definitely wrong here
#not working because these are all tibbles

path_deriv <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/derivatives_abundance"

deriv_list <-list.files(path_deriv)

deriv_test <- tibble()

for (i in lakes_list){
  deriv_test <- deriv_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  saveRDS(deriv_test, paste0("derivatives_lake/derivatives_",i,".rds"))
}

#start of problem
lake_biel_deriv <- readRDS("derivatives_lake/derivatives_Biel.rds")
biel_deriv <- list()

for (i in lake_biel_deriv){
  biel_deriv[[i]] <- readRDS(paste0(path_deriv, "/", i))
}

#hier problembeginn
df_biel_resp_div <- biel_deriv |> 
   bind_rows()

df_biel_deriv <- df_biel_resp_div |> 
  pivot_longer(
    cols = everything(),
    names_to = "Species", 
    values_to = "derivative")

df_biel_pred <- cbind(df_biel_pred, temp_gradient)
df_biel_pred <- df_biel_pred |> 
  rename(temp = mean_last_7days)

###TO DO ###
#make loop and preparation ready for lake subset(small lakes)
#make this ready for all lakes
# make for loop for presence/absence data

# list of problems:
#1. adding negbin not working

# next steps_
#solve problems
#is there a faster way to generate the df for lake plotting?


```

### Response diversity

```{r}
# make df for rdiv, model predictions and derivatives

deriv_const <- readRDS("Derivatives2/derivatives_Constance.rds")

#make df with derviatives data and use this to calculate resposne diversity
resp_div_const <- deriv_const |> 
  bind_cols() #make data frame out of it

resp_div_const$rdiv<-apply(resp_div_const[,c(1:92)], 1, resp_div, sign_sens = F)
resp_div_const$sign<-apply(resp_div_const[,c(1:92)], 1, resp_div, sign_sens = T)
resp_div_const$Med<-median(resp_div_const$rdiv)

df_rdiv_const <- cbind(resp_div_const, temp_gradient)

# make df with model predictions and derivatives
const <- readRDS("Predictions2/predictions_Constance.rds")

pred_const <- const |> 
  bind_cols()

#make df long
df_pred_const <- pred_const |> 
  pivot_longer(
    cols = c(1:92),
    names_to = "Species", 
    values_to = "model_prediction")

# make df for derivative data

df_deriv_const <- deriv_const |> 
  bind_cols()

df_deriv_const <- df_deriv_const |> 
  pivot_longer(
    cols = c(1:92),
    names_to = "Species", 
    values_to = "derivatives")

df_pred_deriv_const <- df_pred_const |> 
  left_join(df_deriv_const)


#add temp
df_pred_const <- cbind(pred_const, temp_gradient)
pred_const$mean_last_7days <- temp_gradient



df_deriv_const$mean_last_7days <- temp_gradient

df_deriv_const <- df_deriv_const |> 
  pivot_longer(
    cols = c(1:97),
    names_to = "Species", 
    values_to = "derivatives")
```

#### Plotting

```{r}
##plotting test constance
fig_a <- ggplot() +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Abundance", tag = "a)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(data = df_pred_const, mapping = aes(x = mean_last_7days$mean_last_7days, y = model_prediction, color = Species)) +
  scale_colour_manual(values = lakeColors, guide = NULL)
  # lims(y = c(ymin_p, ymax_p))

fig_a


# plotting derivatives of presence

fig_b <- ggplot(data = df_deriv_const, mapping = aes(x = mean_last_7days$mean_last_7days, y = derivatives, color = Species)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Derivative", tag = "c)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line() +
  scale_colour_manual(values = lakeColors, guide = NULL)
  # lims(y = c(dmin, dmax))

fig_b

# plotting dissimilarity of derivatives
fig_c <- ggplot(data = resp_div_const, mapping = aes(x = mean_last_7days$mean_last_7days, y = rdiv)) +
  theme_classic(base_size = 14) +
  labs(x = NULL, y = "Dissimilarity", tag = "e)") +
  geom_hline(yintercept = resp_div_const$Med, lty = 2) +
  geom_line()
  # lims(y = c(rmin_p, rmax_p))

fig_c

# plot divergence

fig_d <- ggplot(data = resp_div_const, mapping = aes(x = mean_last_7days$mean_last_7days, y = sign)) +
  theme_bw(base_size = 14) +
  labs(x = "Temperature", y = "Sign", tag = "g)") +
  geom_line()
  # lims(y = c(smin, smax))

fig_d

```
