---
title: "Clean code for all lakes"
format: html
editor: visual
---

## 1. Data for response diversity

```{r}
#| eval: false
#rm(list = ls())
#removes all variables from the current environment, not necessary for what I am doing here
library(tidyverse)
library(patchwork)
library(ggtext)
library(mgcv)
library(gratia)
#library(hypervolume)
library(here)
library(readr)

# function includes lakeColors
source(here("color-and-functions.R"))

# load final dataset
df_final_no_electro <- read_rds("/home/sophie/Dokumente/Master Thesis R/Master Thesis Analysis/df_final_ne.rds")

```

## 2. Calculating Response Diversity for all lakes

First trying it with nested data. Otherwise, doing a for loop or a function

```{r}
# df_final_ne does not include the data from electro fishing -> different number of fish species per lake

# change that presence and abundance are in one column with one column for value
nets_df_final <- df_final_no_electro |> 
  pivot_longer(
    cols = c("Abundance", "Presence"), 
    names_to = "Parameter", 
    values_to = "value"
  )


# make list of all lakes
lakes_list <- nets_df_final |> 
  distinct(Lake) |> 
  pull(Lake)



# working with an abundance subset of this dataset
# if else statement in loop would be a possibility
abu_nets_df_final <- nets_df_final |> 
  filter(Parameter == "Abundance")

# make temperature gradient for the prediction
# temp_gradient <- data.frame(mean_last_7days = seq(from = min(abu_nets_df_final$mean_last_7days, na.rm = TRUE), to = max(abu_nets_df_final$mean_last_7days, na.rm = TRUE), by = 0.02))


# make empty lists for the new data provided by the loop
gam_output <- list()
model_prediction <- list()
derivatives <- list()


#loop for all lakes

for (i in lakes_list){
  presence_lake <- abu_nets_df_final |>
    filter(Lake == i)
  species_list <- presence_lake |>
    distinct(Species) |>
    pull(Species)
  temp_gradient <- data.frame(mean_last_7days = seq(from = min(presence_lake$mean_last_7days, na.rm = TRUE), to = max(presence_lake$mean_last_7days, na.rm = TRUE), by = 0.02))
  #saveRDS(species_list,paste0("test_species/species_", i,".rds"))
  for (j in species_list){ #looping through all species occuring in this lake
    data <- presence_lake |> 
      filter(Species == j)
    gam_output[[j]] <- gam(data = data, value ~ s(mean_last_7days, k = 3, bs = "cs"), family = negbin(1), method = "REML") #GAM per species in all lakes
    model_prediction[[j]] <- predict.gam(gam_output[[j]], temp_gradient, type = "response", se.fit = TRUE)$fit #saving model predictions in RDS
    saveRDS(model_prediction[[j]], paste0("predictions_abundance/predictions_",i,"_",j,".rds"))
    derivatives[[j]] <- derivatives(gam_output[[j]]) #making derivatives and saving them in a RDS
    saveRDS(derivatives[[j]], paste0("derivatives_abundance/derivatives_",i,"_",j,".rds"))
  }

}

# list of problems:
#3. not all species have a color, fix this in lakecolors

###TO DO ###
# make for loop for presence/absence data
#plotting

# freiwillig
#is there a faster way to generate the df for lake plotting?
```

### DFs loops

```{r}
#preparing dfs with predictions for all lakes

path_pred <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/predictions_abundance"

predictions_list <-list.files(path_pred)

predictions_lakes <- list()

#loop works!!!!!!! first real loop of my life
for (i in lakes_list){
  predictions_lakes <- predictions_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  pred <- list()
  lake_data <- abu_nets_df_final |>
    filter(Lake == i)
  temp_gradient <- data.frame(mean_last_7days = seq(from = min(lake_data$mean_last_7days, na.rm = TRUE), to = max(lake_data$mean_last_7days, na.rm = TRUE), by = 0.02)) #add temperature gradient to add to the df
  for (j in predictions_lakes){
    # print(predictions_test)
    pred[[j]] <- readRDS(paste0(path_pred,"/", j))
    df <- pred |>
      bind_cols() |> 
      rename_all(~stringr::str_replace(.,"^predictions_","")) |> #lake in column name needs to be removed too
      rename_with(~ sub(".rds$", "", .x), everything())
    df_temp <- cbind(df, temp_gradient)
    # saveRDS(df_temp, paste0("df_test/df_pred_", i, ".rds"))
    df_pred <- df_temp |> 
      pivot_longer(
        cols = !last_col(), 
        names_to = "Species",
        values_to = "model_prediction") |> 
      rename(temp = mean_last_7days)
    saveRDS(df_pred, paste0("df_predictions/df_pred_", i, ".rds"))
  }
}

# derivatives
path_deriv <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/derivatives_abundance"

deriv_list <-list.files(path_deriv)

deriv_lakes <- list()

for (i in lakes_list){
  deriv_lakes <- deriv_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  deriv <- list()
  for (j in deriv_lakes){
    # print(predictions_test)
    deriv[[j]] <- readRDS(paste0(path_deriv,"/", j))
    df_deriv <- deriv |>
      bind_rows(.id ="id") |>
      rename(Species = id) |> 
      rename(temp = data)
    saveRDS(df_deriv, paste0("df_derivatives/df_deriv_", i, ".rds"))
  }
}

#response diversity


path_deriv <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/derivatives_abundance"

deriv_list <-list.files(path_deriv)

deriv_lakes <- list()

for (i in lakes_list){
  deriv_lakes <- deriv_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  deriv <- list()
  for (j in deriv_lakes){
    # print(predictions_test)
    deriv[[j]] <- readRDS(paste0(path_deriv,"/", j))
    df_deriv <- deriv |>
      bind_rows(.id ="id") |>
      rename(Species = id) |> 
      rename(temp = data)
    df_resp_div <- df_deriv |> 
      select(Species, temp, derivative) |> 
      pivot_wider(
        names_from = Species,
        values_from = derivative) |> 
      rename_all(~stringr::str_replace(.,"^derivatives_","")) |> 
      rename_with(~ sub(".rds$", "", .x), everything())
    #test <- df_resp_div |>
      #select (-temp) |>
      #mutate_all(rdiv = resp_div(1, sign_sens = F))
    df_resp_div$rdiv <- apply(df_resp_div[,-1, drop = FALSE], 1, resp_div, sign_sens = F)
    df_resp_div$sign <- apply(df_resp_div[,-1, drop = FALSE], 1, resp_div, sign_sens = T)
    df_resp_div$Med <- median(df_resp_div$rdiv)
    saveRDS(df_resp_div, paste0("df_response_diversity/df_resp_div_", i, ".rds"))
  }
}


###TO DO #####
#1. remove lake names in front of species names in predictions
#2. remove blabla around species name in derivatives in column
#3. find easy way to calculate response diversity: done

##Fakultative ###
#response diversity kÃ¼rzen
```

### Plotting part

```{r}
#| eval: false
#rm(list = ls())
#removes all variables from the current environment, not necessary for what I am doing here
library(tidyverse)
library(patchwork)
library(ggtext)
library(mgcv)
library(gratia)
#library(hypervolume)
library(here)
library(readr)

# function includes lakeColors
source(here("color-and-functions.R"))

```

### Loading DFs

```{r}
#loading all dfs
#predictions
file_path <-  "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/df_predictions"

file_list <-list.files(file_path)
liste_predictions <- list()

for (i in lakes_list){
  liste_predictions <- file_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  for (j in liste_predictions){
    
    
  }
}

df_biel_pred <- readRDS("df_predictions/df_pred_Biel.rds")
df_brienz_pred <- readRDS("df_predictions/df_pred_Brienz.rds")
df_constance_pred <- readRDS("df_predictions/df_pred_Constance.rds")

```

### Plots

```{r}
##plotting test biel
fig_a <- ggplot() +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Abundance", tag = "a)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(data = df_biel_pred, mapping = aes(x = temp, y = model_prediction, color = Species)) 
  # scale_colour_manual(values = lakeColors)
  # lims(y = c(ymin_p, ymax_p))

fig_a

# plotting derivatives of presence

fig_b <- ggplot(data = df_biel_deriv, mapping = aes(x = temp, y = derivative, color = Species)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Derivative", tag = "c)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line() 
  # scale_colour_manual(values = lakeColors, guide = NULL)
  # lims(y = c(dmin, dmax))

fig_b

# plotting dissimilarity of derivatives
fig_c <- ggplot(data = df_biel_resp_div, mapping = aes(x = temp, y = rdiv)) +
  theme_classic(base_size = 14) +
  labs(x = NULL, y = "Dissimilarity", tag = "e)") +
  geom_hline(yintercept = df_biel_resp_div$Med, lty = 2) +
  geom_line()
  # lims(y = c(rmin_p, rmax_p))

fig_c

# plot divergence

fig_d <- ggplot(data = df_biel_resp_div, mapping = aes(x = temp, y = sign)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Sign", tag = "g)") +
  geom_line()
  # lims(y = c(smin, smax))

fig_d

```

```{r}
##plotting brienz

fig_e <- ggplot() +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Abundance", tag = "a)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(data = df_brienz_pred, mapping = aes(x = temp, y = model_prediction, color = Species)) 
  # scale_colour_manual(values = lakeColors)
  # lims(y = c(ymin_p, ymax_p))

fig_e

# plotting derivatives of presence

fig_f <- ggplot(data = df_brienz_deriv, mapping = aes(x = temp, y = derivative, color = Species)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Derivative", tag = "c)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line() 
  # scale_colour_manual(values = lakeColors, guide = NULL)
  # lims(y = c(dmin, dmax))

fig_f

# plotting dissimilarity of derivatives
fig_g <- ggplot(data = df_brienz_resp_div, mapping = aes(x = temp, y = rdiv)) +
  theme_classic(base_size = 14) +
  labs(x = NULL, y = "Dissimilarity", tag = "e)") +
  geom_hline(yintercept = df_brienz_resp_div$Med, lty = 2) +
  geom_line()
  # lims(y = c(rmin_p, rmax_p))

fig_g

# plot divergence

fig_h <- ggplot(data = df_brienz_resp_div, mapping = aes(x = temp, y = sign)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Sign", tag = "g)") +
  geom_line()
  # lims(y = c(smin, smax))

fig_h

```
