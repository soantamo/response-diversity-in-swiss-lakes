---
title: "Clean code for all lakes"
format: html
editor: visual
---

## 1. Data for response diversity

```{r}
#| eval: false
#rm(list = ls())
#removes all variables from the current environment, not necessary for what I am doing here
library(tidyverse)
library(patchwork)
library(ggtext)
library(mgcv)
library(gratia)
#library(hypervolume)
library(here)
library(readr)

# function includes lakeColors
source(here("color-and-functions.R"))

# load final dataset
df_final_no_electro <- read_rds("/home/sophie/Dokumente/Master Thesis R/Master Thesis Analysis/df_final_ne.rds")

```

## 2. Calculating Response Diversity for all lakes

First trying it with nested data. Otherwise, doing a for loop or a function

```{r}
# df_final_ne does not include the data from electro fishing -> different number of fish species per lake

# change that presence and abundance are in one column with one column for value
nets_df_final <- df_final_no_electro |> 
  pivot_longer(
    cols = c("Abundance", "Presence"), 
    names_to = "Parameter", 
    values_to = "value"
  )


# make list of all lakes
lakes_list <- nets_df_final |> 
  distinct(Lake) |> 
  pull(Lake)

# later included inside the loop
# species_list <- nets_df_final |> 
#   distinct(Species) |> 
#   pull(Species)

# working with an abundance subset of this dataset
# if else statement in loop would be a possibility
abu_nets_df_final <- nets_df_final |> 
  filter(Parameter == "Abundance")

# make temperature gradient for the prediction
# temp_gradient <- data.frame(mean_last_7days = seq(from = min(abu_nets_df_final$mean_last_7days, na.rm = TRUE), to = max(abu_nets_df_final$mean_last_7days, na.rm = TRUE), by = 0.02))


# make empty lists for the new data provided by the loop
gam_output <- list()
model_prediction <- list()
derivatives <- list()


#loop for all lakes

for (i in lakes_list){
  presence_lake <- abu_nets_df_final |>
    filter(Lake == i)
  species_list <- presence_lake |>
    distinct(Species) |>
    pull(Species)
  temp_gradient <- data.frame(mean_last_7days = seq(from = min(presence_lake$mean_last_7days, na.rm = TRUE), to = max(presence_lake$mean_last_7days, na.rm = TRUE), by = 0.02))
  #saveRDS(species_list,paste0("test_species/species_", i,".rds"))
  for (j in species_list){ #looping through all species occuring in this lake
    data <- presence_lake |> 
      filter(Species == j)
    gam_output[[j]] <- gam(data = data, value ~ s(mean_last_7days, k = 3, bs = "cs"), family = negbin(1), method = "REML") #GAM per species in all lakes
    model_prediction[[j]] <- predict.gam(gam_output[[j]], temp_gradient, type = "response", se.fit = TRUE)$fit #saving model predictions in RDS
    saveRDS(model_prediction[[j]], paste0("predictions_abundance/predictions_",i,"_",j,".rds"))
    derivatives[[j]] <- derivatives(gam_output[[j]]) #making derivatives and saving them in a RDS
    saveRDS(derivatives[[j]], paste0("derivatives_abundance/derivatives_",i,"_",j,".rds"))
  }

}

#small lake subset to try loop

# gam_output <- list()
# model_prediction <- list()
# derivatives <- list()
# # # 
# df_small <- abu_nets_df_final |>
#   filter(Lake %in% c("Biel", "Brienz", "Walen"))


# small_lakes <- df_small |>
#   distinct(Lake) |>
#   pull(Lake)
# 
# for (i in small_lakes){
#   presence_lake <- df_small |>
#     filter(Lake == i)
#   species_list <- presence_lake |>
#     distinct(Species) |>
#     pull(Species)
#   temp_gradient <- data.frame(mean_last_7days = seq(from = min(presence_lake$mean_last_7days, na.rm = TRUE), to = max(presence_lake$mean_last_7days, na.rm = TRUE), by = 0.02))
#   #saveRDS(species_list,paste0("test_species/species_", i,".rds"))
#   for (j in species_list){ #looping through all species occuring in this lake
#     data <- presence_lake |>
#       filter(Species == j)
#     gam_output[[j]] <- gam(data = data, value ~ s(mean_last_7days, k = 3, bs = "cs"), family = negbin(1), method = "REML") #GAM per species in all lakes
#     model_prediction[[j]] <- predict.gam(gam_output[[j]], temp_gradient, type = "response", se.fit = TRUE)$fit #saving model predictions in RDS
#     saveRDS(model_prediction[[j]], paste0("pred_test/predictions_",i,"_",j,".rds"))
#     derivatives[[j]] <- derivatives(gam_output[[j]]) #making derivatives and saving them in a RDS
#     saveRDS(derivatives[[j]], paste0("deriv_test/derivatives_",i,"_",j,".rds"))
#   }
# 
# }




# list of problems:
#1. adding negbin not working! works until sarnen, then problems, solved
#2. temperature gradient needs to be inside the loop? what is wrong with the temperature?: should work now
#3. not all species have a color, fix this in lakecolors

###TO DO ###
#find efficient way to prepare predictions, derivatives and response diversity for all lakes
# make for loop for presence/absence data
#plotting

# next steps_
#solve problems: done
#is there a faster way to generate the df for lake plotting?


#ideas for solving error message and negbin problem
#remove NAs in df: e.g. df <- na.omit(df)
#or is.nan(x) and is.infinity(x) in data
#update: drop_na not necessary!
#bs = "cs" seems to solve problem, thanks to zuur book
```

### Predictions, derivatives and response diversity DFs

```{r}
# make df with predictions of one lake

path_pred <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/predictions_abundance"

predictions_list <-list.files(path_pred)

predictions_test <- tibble()

for (i in lakes_list){
  predictions_test <- predictions_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  saveRDS(predictions_test, paste0("predictions_lake/predictions_",i,".rds"))
}

# biel
lake_biel <- readRDS("predictions_lake/predictions_Biel.rds")
biel_predictions <- list()

for (i in lake_biel){
  biel_predictions[[i]] <- readRDS(paste0(path_pred,"/", i))
}

df_biel <- biel_predictions |> 
  bind_cols() |> 
  rename_all(~stringr::str_replace(.,"^predictions_Biel_","")) |> 
  rename_with(~ sub(".rds$", "", .x), everything())

biel_temp <- abu_nets_df_final |> 
  filter(Lake == "Biel")

biel_temp_gradient <- data.frame(mean_last_7days = seq(from = min(biel_temp$mean_last_7days, na.rm = TRUE), to = max(biel_temp$mean_last_7days, na.rm = TRUE), by = 0.02))

df_biel <- cbind(df_biel, biel_temp_gradient)


df_biel_pred <- df_biel |> 
  pivot_longer(
    cols = c(1:22),
    names_to = "Species", 
    values_to = "model_prediction")

df_biel_pred <- df_biel_pred |> 
  rename(temp = mean_last_7days)

#brienz

lake_brienz <- readRDS("predictions_lake/predictions_Brienz.rds")
brienz_predictions <- list()

for (i in lake_brienz){
  brienz_predictions[[i]] <- readRDS(paste0(path_pred,"/", i))
}

df_brienz <- brienz_predictions |> 
  bind_cols() |> 
  rename_all(~stringr::str_replace(.,"^predictions_Brienz_","")) |> 
  rename_with(~ sub(".rds$", "", .x), everything())

brienz_temp <- abu_nets_df_final |> 
  filter(Lake == "Brienz")

brienz_temp_gradient <- data.frame(mean_last_7days = seq(from = min(brienz_temp$mean_last_7days, na.rm = TRUE), to = max(brienz_temp$mean_last_7days, na.rm = TRUE), by = 0.02))

df_brienz <- cbind(df_brienz, brienz_temp_gradient)


df_brienz_pred <- df_brienz |> 
  pivot_longer(
    cols = c(1:16),
    names_to = "Species", 
    values_to = "model_prediction")

df_brienz_pred <- df_brienz_pred |> 
  rename(temp = mean_last_7days)

#make df with derivatives and combine both dfs
# something is definitely wrong here
#not working because these are all tibbles

#all lakes

path_deriv <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/derivatives_abundance"

deriv_list <-list.files(path_deriv)

deriv_test <- list()

for (i in lakes_list){
  deriv_test <- deriv_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  saveRDS(deriv_test, paste0("derivatives_lake/derivatives_", i,".rds"))
}

#biel 
lake_biel_deriv <- readRDS("derivatives_lake/derivatives_Biel.rds")
biel_deriv <- list()

for (i in lake_biel_deriv){
  biel_deriv[[i]] <- readRDS(paste0(path_deriv, "/", i))
}

df_biel_deriv <- biel_deriv |> 
   bind_rows(.id = "id")

df_biel_deriv$id <- gsub("derivatives_Biel_", "", df_biel_deriv$id)
df_biel_deriv$id <- sub(".rds$", "", df_biel_deriv$id)

df_biel_deriv <- df_biel_deriv |> 
  rename(Species = id) |> 
  rename(temp = data)

#brienz
lake_brienz_deriv <- readRDS("derivatives_lake/derivatives_Brienz.rds")
brienz_deriv <- list()

for (i in lake_brienz_deriv){
  brienz_deriv[[i]] <- readRDS(paste0(path_deriv, "/", i))
}

df_brienz_deriv <- brienz_deriv |> 
   bind_rows(.id = "id")

df_brienz_deriv$id <- gsub("derivatives_Brienz_", "", df_brienz_deriv$id)
df_brienz_deriv$id <- sub(".rds$", "", df_brienz_deriv$id)

df_brienz_deriv <- df_brienz_deriv |> 
  rename(Species = id) |> 
  rename(temp = data)


#response diversity
#biel

df_biel_resp_div <- df_biel_deriv |> 
  select(Species, temp, derivative) |> 
   pivot_wider(
     names_from = Species,
     values_from = derivative)

df_biel_resp_div$rdiv <- apply(df_biel_resp_div[,c(2:22)], 1, resp_div, sign_sens = F)
df_biel_resp_div$sign <- apply(df_biel_resp_div[,c(2:22)], 1, resp_div, sign_sens = T)
df_biel_resp_div$Med <- median(df_biel_resp_div$rdiv)

#brienz
df_brienz_resp_div <- df_brienz_deriv |> 
  select(Species, temp, derivative) |> 
   pivot_wider(
     names_from = Species,
     values_from = derivative)

df_brienz_resp_div$rdiv <- apply(df_brienz_resp_div[,c(2:17)], 1, resp_div, sign_sens = F)
df_brienz_resp_div$sign <- apply(df_brienz_resp_div[,c(2:17)], 1, resp_div, sign_sens = T)
df_brienz_resp_div$Med <- median(df_brienz_resp_div$rdiv)
```

#### Efficient

```{r}
#predictions, tested with small lakes

path_pred <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/pred_test"

predictions_list <-list.files(path_pred)

predictions_small <- list()

#loop works!!!!!!! first real loop of my life
for (i in small_lakes){
  predictions_small <- predictions_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  pred <- list()
  lake_data <- abu_nets_df_final |>
    filter(Lake == i)
  temp_gradient <- data.frame(mean_last_7days = seq(from = min(lake_data$mean_last_7days, na.rm = TRUE), to = max(lake_data$mean_last_7days, na.rm = TRUE), by = 0.02))
  for (j in predictions_small){
    # print(predictions_test)
    pred[[j]] <- readRDS(paste0(path_pred,"/", j))
    df <- pred |>
      bind_cols() |> 
      rename_all(~stringr::str_replace(.,"^predictions_","")) |> #lake in column name needs to be removed too
      rename_with(~ sub(".rds$", "", .x), everything())
    df_temp <- cbind(df, temp_gradient)
    # saveRDS(df_temp, paste0("df_test/df_pred_", i, ".rds"))
    df_pred <- df_temp |> 
      pivot_longer(
        cols = !last_col(), 
        names_to = "Species",
        values_to = "model_prediction")
    saveRDS(df_pred, paste0("df_long/df_pred_", i, ".rds"))
  }
}

```

#### Plotting

```{r}
##plotting test biel
fig_a <- ggplot() +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Abundance", tag = "a)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(data = df_biel_pred, mapping = aes(x = temp, y = model_prediction, color = Species)) 
  # scale_colour_manual(values = lakeColors)
  # lims(y = c(ymin_p, ymax_p))

fig_a

# plotting derivatives of presence

fig_b <- ggplot(data = df_biel_deriv, mapping = aes(x = temp, y = derivative, color = Species)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Derivative", tag = "c)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line() 
  # scale_colour_manual(values = lakeColors, guide = NULL)
  # lims(y = c(dmin, dmax))

fig_b

# plotting dissimilarity of derivatives
fig_c <- ggplot(data = df_biel_resp_div, mapping = aes(x = temp, y = rdiv)) +
  theme_classic(base_size = 14) +
  labs(x = NULL, y = "Dissimilarity", tag = "e)") +
  geom_hline(yintercept = df_biel_resp_div$Med, lty = 2) +
  geom_line()
  # lims(y = c(rmin_p, rmax_p))

fig_c

# plot divergence

fig_d <- ggplot(data = df_biel_resp_div, mapping = aes(x = temp, y = sign)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Sign", tag = "g)") +
  geom_line()
  # lims(y = c(smin, smax))

fig_d

```

```{r}
##plotting brienz

fig_e <- ggplot() +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Abundance", tag = "a)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(data = df_brienz_pred, mapping = aes(x = temp, y = model_prediction, color = Species)) 
  # scale_colour_manual(values = lakeColors)
  # lims(y = c(ymin_p, ymax_p))

fig_e

# plotting derivatives of presence

fig_f <- ggplot(data = df_brienz_deriv, mapping = aes(x = temp, y = derivative, color = Species)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Derivative", tag = "c)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line() 
  # scale_colour_manual(values = lakeColors, guide = NULL)
  # lims(y = c(dmin, dmax))

fig_f

# plotting dissimilarity of derivatives
fig_g <- ggplot(data = df_brienz_resp_div, mapping = aes(x = temp, y = rdiv)) +
  theme_classic(base_size = 14) +
  labs(x = NULL, y = "Dissimilarity", tag = "e)") +
  geom_hline(yintercept = df_brienz_resp_div$Med, lty = 2) +
  geom_line()
  # lims(y = c(rmin_p, rmax_p))

fig_g

# plot divergence

fig_h <- ggplot(data = df_brienz_resp_div, mapping = aes(x = temp, y = sign)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Sign", tag = "g)") +
  geom_line()
  # lims(y = c(smin, smax))

fig_h

```
