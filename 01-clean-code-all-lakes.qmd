---
title: "Clean code for all lakes"
format: html
editor: visual
---

## 1. Data for response diversity

```{r}
#| eval: false
#rm(list = ls())
#removes all variables from the current environment, not necessary for what I am doing here
library(tidyverse)
library(patchwork)
library(ggtext)
library(mgcv)
library(gratia)
library(hypervolume)
library(here)
library(readr)

# function includes lakeColors
source(here("color-and-functions.R"))

# load final dataset
df_final <- read_rds("/home/sophie/Dokumente/Master Thesis R/Master Thesis Analysis/df_final.rds")
```

## 2. Calculating Response Diversity for all lakes

Doing loops

```{r}

##for loops, no nesting

# exclude electro data from this df
nets_df_final <- df_final |>
  filter(!Protocol == "electro")

# change that presence and abundance are in one column with one column for value
nets_df_final <- nets_df_final |> 
  pivot_longer(
    cols = c("Abundance", "Presence"), 
    names_to = "Parameter", 
    values_to = "value"
  )

# make lists with all possible Lakes and Species
lakes_list <- nets_df_final |> 
  distinct(Lake) |> 
  pull(Lake)

# later included inside the loop
# species_list <- nets_df_final |> 
#   distinct(Species) |> 
#   pull(Species)

# make empty lists for the new data provided by the loop
gam_output <- list()
model_prediction <- list()
derivatives <- list()


# working with an abundance subset of this dataset
# if else statement in loop would be a possibility
pre_nets_df_final <- nets_df_final |> 
  filter(Parameter == "Abundance")


# make temperature gradient for the prediction
temp_gradient <- data.frame(mean_last_7days = seq(from = min(pre_nets_df_final$mean_last_7days, na.rm = TRUE), to = max(pre_nets_df_final$mean_last_7days, na.rm = TRUE), by = 0.02))

# looping through every lake, filtering it by the current lake and pulling a list of in this lake occuring species
for ( i in lakes_list){
  presence_lake <- pre_nets_df_final |> 
    filter(Lake == i)
  species_list <- presence_lake |> 
  distinct(Species) |> 
    pull(Species)
  for (j in species_list){ #looping through all species occuring in this lake
    gam_output <- gam(data = presence_lake |> filter(Species== j), value ~ s(mean_last_7days, k = 3)) #GAM per species in all lakes
    
    model_prediction[[j]] <- predict.gam(gam_output, temp_gradient, type = "response", se.fit = TRUE)$fit #saving model predictions in RDS
    
    saveRDS(model_prediction,paste0("Predictions2/predictions_",i,".rds"))
    
    derivatives[[j]] <- derivatives(gam_output) #making derivatives and saving them in a RDS
    
    saveRDS(model_prediction,paste0("Derivatives2/derivatives_",i,".rds"))
    
    
  }
}


const <- readRDS("Predictions2/predictions_Constance.rds")

const |> 
  bind_cols() #make data frame out of RDS 


# ######TO DO

# add negative binomial to gam predictions
# change name to abundance 
# noch Seen herausl√∂schen (evtl mit Spezifikation der columns 1:16 (da immer alle seen dabei sein sollten))
#response diversity berechnen
# plots ausprobieren
# make for loop for presence/absence data


View(biel)

abramis <- readRDS("Predictions/predictions_Abramis_brama.rds")

abramis[1]

```
