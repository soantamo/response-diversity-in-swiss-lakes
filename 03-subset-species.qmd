---
title: "03-species-subset"
format: html
editor: visual
---

## Conclusion

New GAMs with subset of species needs to be done, completely different outcome. In Lake Biel dissimilarity

Needs to be redone, to get dfs with subset only

```{r}
#| eval: false
#rm(list = ls())
#removes all variables from the current environment, not necessary for what I am doing here
library(tidyverse)
library(patchwork)
library(ggtext)
library(mgcv)
library(gratia)
#library(hypervolume)
library(here)
library(readr)

# function from Ross et al. and species colors are now seperate
source(here("functions.R"))
source(here("species_colors.R"))

# load final dataset
df_final_no_electro <- read_rds("/home/sophie/Dokumente/Master Thesis R/Master Thesis Analysis/df_final_ne.rds")
```

all new for subset of species with biel only

```{r}
#testing wit small lakes

nets_df_final <- df_final_no_electro |> 
  pivot_longer(
    cols = c("Abundance", "Presence"), 
    names_to = "Parameter", 
    values_to = "value"
  )

abu_nets_df_final <- nets_df_final |> 
  filter(Parameter == "Abundance")

#only species with significant coefficients and smoothing parameters included
#How can I get one dataset with my subsets? 
#Brienz significant one: Alburnus_alburnus, Coregonus_albellus, Coregonus_brienzii, Coregonus_fatioi, Coregonus_sp, Leuciscus_leuciscus, Perca_fluviatilis, Rutilus_rutilus

biel_subset <- abu_nets_df_final |>
  filter(Lake %in% "Biel") |> 
  filter(Species %in% c("Alburnus_alburnus", "Coregonus_confusus", "Coregonus_sp", "Perca_fluviatilis", "Rutilus_rutilus", "Sander_lucioperca", "Tinca_tinca")) #double-checked, these are the species, two are almost significant (alb_alb, sander), I decided to include them because 4 oder 5 nachkommastelle

brienz_subset <- abu_nets_df_final |>
  filter(Lake %in% "Brienz") |> 
  filter(Species %in% c("Alburnus_alburnus"," Coregonus_albellus", "Coregonus_brienzii", "Coregonus_fatioi", "Coregonus_sp", "Leuciscus_leuciscus", "Perca_fluviatilis", "Rutilus_rutilus")) #double-checked

walen_subset <- abu_nets_df_final |>
  filter(Lake %in% "Walen") |> 
  filter(Species %in% c("Alburnus_alburnus"," Coregonus_sp", "Cottus_gobio_Aare_littoral", "Leuciscus_leuciscus", "Lota_lota", "Perca_fluviatilis", "Rutilus_rutilus", "Salvelinus_sp_Profundal_Walen_I", "Salvelinus_umbla", "Squalius_cephalus")) #double checked


df_small <- bind_rows(biel_subset, brienz_subset, walen_subset) #qorks with bind_rows, make all subsets separately and then new df from this -> can be used for the loop 


small_lakes <- df_small|>
  distinct(Lake) |>
  pull(Lake)

gam_output <- list()
model_prediction <- list()
derivatives <- list()


for (i in small_lakes){
  presence_lake <- df_small |>
    filter(Lake == i)
  species_list <- presence_lake |>
    distinct(Species) |>
    pull(Species)
  temp_gradient <- data.frame(mean_last_7days = seq(from = min(presence_lake$mean_last_7days, na.rm = TRUE), to = max(presence_lake$mean_last_7days, na.rm = TRUE), by = 0.02))
  #saveRDS(species_list,paste0("test_species/species_", i,".rds"))
  for (j in species_list){ #looping through all species occuring in this lake
    data <- presence_lake |> 
      filter(Species == j)
    gam_output[[j]] <- gam(data = data, value ~ s(mean_last_7days, k = 3, bs = "cs"), family = negbin(1), method = "REML") #GAM per species in all lakes
    model_prediction[[j]] <- predict.gam(gam_output[[j]], temp_gradient, type = "response", se.fit = TRUE)$fit #saving model predictions in RDS
    model_bind <- cbind(model_prediction[[j]], temp_gradient)
    saveRDS(model_bind, paste0("Subset/test_pred/predictions_",i,"_",j,".rds"))
    derivatives[[j]] <- derivatives(gam_output[[j]]) #making derivatives and saving them in a RDS
    saveRDS(derivatives[[j]], paste0("Subset/test_deriv/derivatives_",i,"_",j,".rds"))
  }

}

```

dfs

```{r}
#preparing dfs with predictions for all lakes

path_pred <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/Subset/test_pred"

predictions_list <-list.files(path_pred)

predictions_lakes <- list()

#loop works!!!!!!! first real loop of my life
for (i in small_lakes){
  predictions_lakes <- predictions_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  pred <- list()
  lake_data <- df_small |>
    filter(Lake == i)
  temp_gradient <- data.frame(mean_last_7days = seq(from = min(lake_data$mean_last_7days, na.rm = TRUE), to = max(lake_data$mean_last_7days, na.rm = TRUE), by = 0.02)) #add temperature gradient to add to the df
  for (j in predictions_lakes){
    # print(predictions_test)
    pred[[j]] <- readRDS(paste0(path_pred,"/", j))
    df_pred <- pred |>
      bind_rows(.id ="id") |>
      rename(Species = id) |> 
      rename(model_prediction = `model_prediction[[j]]`) |> #does not work
      rename(temp = mean_last_7days) |> 
      mutate(Species = sub("^[^_]*_", "", Species)) |> 
      mutate(Species = sub("^[^_]*_", "", Species)) |>
      mutate(Species = sub("\\.rds$", "", Species))
    saveRDS(df_pred, paste0("Subset/test_df_pred/df_pred_", i, ".rds"))
      
  }
}

# derivatives
path_deriv <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/Subset/test_deriv"

deriv_list <-list.files(path_deriv)

deriv_lakes <- list()

for (i in small_lakes){
  deriv_lakes <- deriv_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  deriv <- list()
  for (j in deriv_lakes){
    # print(predictions_test)
    deriv[[j]] <- readRDS(paste0(path_deriv,"/", j))
    df_deriv <- deriv |>
      bind_rows(.id ="id") |>
      rename(Species = id) |> 
      rename(temp = data) |> 
      mutate(Species = sub("^[^_]*_", "", Species)) |> 
      mutate(Species = sub("^[^_]*_", "", Species)) |>
      mutate(Species = sub("\\.rds$", "", Species))
    saveRDS(df_deriv, paste0("Subset/test_df_deriv/df_deriv_", i, ".rds"))
  }
}

# test <- readRDS("df_derivatives/df_deriv_Biel.rds")
#response diversity

path_deriv <- "/home/sophie/Dokumente/Master Thesis R/response-diversity-in-swiss-lakes/Subset/test_deriv"

deriv_list <-list.files(path_deriv)

deriv_lakes <- list()

for (i in small_lakes){
  deriv_lakes <- deriv_list |> 
    as_tibble() |> 
    filter(str_detect(value, i)) |> 
    pull(value)
  deriv <- list()
  for (j in deriv_lakes){
    # print(predictions_test)
    deriv[[j]] <- readRDS(paste0(path_deriv,"/", j))
    df_deriv <- deriv |>
      bind_rows(.id ="id") |>
      rename(Species = id) |> 
      rename(temp = data)
    df_resp_div <- df_deriv |> 
      select(Species, temp, derivative) |> 
      pivot_wider(
        names_from = Species,
        values_from = derivative) |> 
      rename_all(~stringr::str_replace(.,"^derivatives_","")) |> 
      rename_all(~stringr::str_replace(.,"^[^_]*_", "")) |>
      rename_with(~ sub(".rds$", "", .x), everything())
    #test <- df_resp_div |>
      #select (-temp) |>
      #mutate_all(rdiv = resp_div(1, sign_sens = F))
    df_resp_div$rdiv <- apply(df_resp_div[,-1, drop = FALSE], 1, resp_div, sign_sens = F)
    df_resp_div$sign <- apply(df_resp_div[,-1, drop = FALSE], 1, resp_div, sign_sens = T)
    df_resp_div$Med <- median(df_resp_div$rdiv)
    saveRDS(df_resp_div, paste0("Subset/test_df_respdiv/df_resp_div_", i, ".rds"))
  }
}



```

Plots

Biel

```{r}
df_biel_pred <- readRDS("Subset/test_df_pred/df_pred_Biel.rds")
df_biel_deriv <- readRDS("Subset/test_df_deriv/df_deriv_Biel.rds")
df_biel_resp_div <- readRDS("Subset/test_df_respdiv/df_resp_div_Biel.rds")

mean(df_biel_resp_div$rdiv)
mean(df_biel_resp_div$sign)
vergleich <- readRDS("test_df_mean_dissimilarity.rds")
vergleich2 <- readRDS("test_df_mean_divergence.rds")

fig_a <- ggplot() +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Abundance", tag = "a)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(data = df_biel_pred, mapping = aes(x = temp, y = model_prediction, color = Species)) +
  scale_colour_manual(values = lakeColors, guide = NULL)
  # lims(y = c(ymin_p, ymax_p))

fig_a

fig_b <- ggplot(data = df_biel_deriv, mapping = aes(x = temp, y = derivative, color = Species)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Derivative", tag = "b)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(show.legend = FALSE) +
  scale_colour_manual(values = lakeColors, guide = NULL)
  # lims(y = c(dmin, dmax))


fig_b

fig_c <- ggplot(data = df_biel_resp_div, mapping = aes(x = temp, y = rdiv)) +
  theme_classic(base_size = 14) +
  labs(x = NULL, y = "Dissimilarity", tag = "c)") +
  geom_hline(yintercept = df_biel_resp_div$Med, lty = 2) +
  geom_line()
  # lims(y = c(rmin_p, rmax_p))

fig_c

fig_d <- ggplot(data = df_biel_resp_div, mapping = aes(x = temp, y = sign)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Sign", tag = "d)") +
  geom_line()

fig_d

plot_lake_biel <- fig_a + fig_b + fig_c + fig_d

plot_lake_biel
```

Brienz

```{r}
df_brienz_pred <- readRDS("Subset/test_df_pred/df_pred_Brienz.rds")
df_brienz_deriv <- readRDS("Subset/test_df_deriv/df_deriv_Brienz.rds")
df_brienz_resp_div <- readRDS("Subset/test_df_respdiv/df_resp_div_Brienz.rds")

mean(df_brienz_resp_div$rdiv)
mean(df_brienz_resp_div$sign)
vergleich <- readRDS("test_df_mean_dissimilarity.rds")
vergleich2 <- readRDS("test_df_mean_divergence.rds")

fig_a <- ggplot() +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Abundance", tag = "a)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(data = df_brienz_pred, mapping = aes(x = temp, y = model_prediction, color = Species)) +
  scale_colour_manual(values = lakeColors, guide = NULL)
# lims(y = c(ymin_p, ymax_p))

fig_a

fig_b <- ggplot(data = df_brienz_deriv, mapping = aes(x = temp, y = derivative, color = Species)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Derivative", tag = "b)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(show.legend = FALSE) +
  scale_colour_manual(values = lakeColors, guide = NULL)
# lims(y = c(dmin, dmax))


fig_b

fig_c <- ggplot(data = df_brienz_resp_div, mapping = aes(x = temp, y = rdiv)) +
  theme_classic(base_size = 14) +
  labs(x = NULL, y = "Dissimilarity", tag = "c)") +
  geom_hline(yintercept = df_brienz_resp_div$Med, lty = 2) +
  geom_line()
# lims(y = c(rmin_p, rmax_p))

fig_c

fig_d <- ggplot(data = df_brienz_resp_div, mapping = aes(x = temp, y = sign)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Sign", tag = "d)") +
  geom_line()

fig_d

plot_lake_brienz <- fig_a + fig_b + fig_c + fig_d

plot_lake_brienz
```

Walen

```{r}
df_walen_pred <- readRDS("Subset/test_df_pred/df_pred_Walen.rds")
df_walen_deriv <- readRDS("Subset/test_df_deriv/df_deriv_Walen.rds")
df_walen_resp_div <- readRDS("Subset/test_df_respdiv/df_resp_div_Walen.rds")

mean(df_walen_resp_div$rdiv)
mean(df_walen_resp_div$sign)
vergleich <- readRDS("test_df_mean_dissimilarity.rds")
vergleich2 <- readRDS("test_df_mean_divergence.rds")

fig_a <- ggplot() +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Abundance", tag = "a)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(data = df_walen_pred, mapping = aes(x = temp, y = model_prediction, color = Species)) +
  scale_colour_manual(values = lakeColors, guide = NULL)
# lims(y = c(ymin_p, ymax_p))

fig_a

fig_b <- ggplot(data = df_walen_deriv, mapping = aes(x = temp, y = derivative, color = Species)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Derivative", tag = "b)") +
  geom_hline(
    yintercept = 0,
    lty = 2) +
  geom_line(show.legend = FALSE) +
  scale_colour_manual(values = lakeColors, guide = NULL)
# lims(y = c(dmin, dmax))


fig_b

fig_c <- ggplot(data = df_walen_resp_div, mapping = aes(x = temp, y = rdiv)) +
  theme_classic(base_size = 14) +
  labs(x = NULL, y = "Dissimilarity", tag = "c)") +
  geom_hline(yintercept = df_walen_resp_div$Med, lty = 2) +
  geom_line()
# lims(y = c(rmin_p, rmax_p))

fig_c

fig_d <- ggplot(data = df_walen_resp_div, mapping = aes(x = temp, y = sign)) +
  theme_classic(base_size = 14) +
  labs(x = "Temperature", y = "Sign", tag = "d)") +
  geom_line()

fig_d

plot_lake_walen <- fig_a + fig_b + fig_c + fig_d

plot_lake_walen
```
